<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Maximum Subarray]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F30%2FMaximum-Subarray%2F</url>
    <content type="text"><![CDATA[题目Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example 1: 123Input: [-2,1,-3,4,-1,2,1,-5,4],Output: 6Explanation: [4,-1,2,1] has the largest sum = 6. 解析本题主要是有关数组区间的问题，我们只需循环遍历便能得出最后结果。 123456789101112public int maxSubArray(int[] nums) &#123; if (nums == null || nums.length == 0) &#123; return 0; &#125; int preSum = nums[0]; int maxSum = preSum; for (int i = 1; i &lt; nums.length; i++)&#123; preSum = preSum &gt; 0 ? preSum + nums[i] : nums[i]; maxSum = Math.max(maxSum, preSum); &#125; return maxSum;&#125; 复杂性分析 时间复杂度：O(N). 空间复杂度：O(1).]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>数组区间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Count and Say]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F24%2FCount-and-Say%2F</url>
    <content type="text"><![CDATA[题目The count-and-say sequence is the sequence of integers with the first five terms as following: 123451. 12. 113. 214. 12115. 111221 1 is read off as &quot;one 1&quot; or 11.11 is read off as &quot;two 1s&quot; or 21.21 is read off as &quot;one 2, then one 1&quot; or 1211. Given an integer n, generate the nth term of the count-and-say sequence. Note: Each term of the sequence of integers will be represented as a string. Example 1: 12Input: 1Output: &quot;1&quot; Example 2: 12Input: 4Output: &quot;1211&quot; 解析本题第一次看见可能有点难以理解，不过只要理解第二序列代表的是前一个序列，就是念出来的序列。举个栗子，11的下一个序列是“2个1”，即21该序列又叫做外观序列，无论如何我们都得将前一个序列元素算出来，才能计算后一个序列元素。当递归至0的时候返回初始数字1。 123456789101112131415161718192021222324252627public String countAndSay(int n) &#123; // 递归尽头返回空或者1 if(n == 0) return ""; if(n == 1) return "1"; // 计算出上一个字符串 String s = countAndSay(n - 1); StringBuilder sb = new StringBuilder(); // 通过记录上次的字符来判断是否重复 char last = s.charAt(0); int cnt = 1; for(int i = 1; i &lt; s.length(); i++)&#123; // 如果重复则计数器加1 if(s.charAt(i) == last)&#123; cnt++; &#125; else &#123; // 否则添加上一个字符，并重置计数器为1 sb.append(cnt); sb.append(last); last = s.charAt(i); cnt = 1; &#125; &#125; // 最后记得把最后一个字符加上 sb.append(cnt); sb.append(last); return sb.toString(); &#125; 复杂性分析 时间复杂度：O(N!). 空间复杂度：O(N). 还有一种循环解法的复杂度也是一样的，只是把迭代改成了循环。 1234567891011121314151617181920212223public String countAndSay(int n) &#123; if(n == 0) return ""; String s = "1"; for(int j = 1; j &lt; n; j++)&#123; StringBuilder sb = new StringBuilder(); char last = s.charAt(0); int cnt = 1; for(int i = 1; i &lt; s.length(); i++)&#123; if(s.charAt(i) == last)&#123; cnt++; &#125; else &#123; sb.append(cnt); sb.append(last); last = s.charAt(i); cnt = 1; &#125; &#125; sb.append(cnt); sb.append(last); s = sb.toString(); &#125; return s;&#125; 这两种解法都能得到最优解。]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Search Insert Position]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F23%2FSearch-Insert-Position%2F</url>
    <content type="text"><![CDATA[题目Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array. Example 1: 12Input: [1,3,5,6], 5Output: 2 Example 2: 12Input: [1,3,5,6], 2Output: 1 Example 3: 12Input: [1,3,5,6], 7Output: 4 Example 4: 12Input: [1,3,5,6], 0Output: 0 解析本题可以采用二分查找法，如果没有找到目标元素，我们可以定位在mid之前或之后，这对我们进行查找非常有用。 1234567891011121314151617public int searchInsert(int[] A, int target) &#123; if (A == null || A.length == 0)&#123; return 0; &#125; int l = 0; int r = A.length - 1; while (l &lt;= r)&#123; int mid = (l + r) / 2; if (A[mid] == target) return mid; if (A[mid] &lt; target) l = mid + 1; else r = mid - 1; &#125; return l; &#125; 复杂性分析 时间复杂度：O(log~n~). 空间复杂度：O(1).]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Implement strStr()]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F22%2FImplement-strStr%2F</url>
    <content type="text"><![CDATA[题目Implement strStr(). Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. Example 1: 12Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;Output: 2 Example 2: 12Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;Output: -1 解析由于本题不能使用 Java 的 indexOf() 方法，我们需要另外想出办法，比如暴力解法，这是比较适合我们的初级解法。我只需要合理地对字符进行判断，对循环越界的地方进行判定就能很容易得出结果。 123456789101112131415public int strStr(String haystack, String needle) &#123; int start = 0; // 如果剩下的字母不够needle长度就停止遍历 while (start &lt;= haystack.length() - needle.length())&#123; int i = start; int j = 0; while (j &lt; needle.length() &amp;&amp; haystack.charAt(i) == needle.charAt(j))&#123; i++; j++; &#125; if (j == needle.length()) return start; start++; &#125; return -1; &#125; 复杂性分析 时间复杂度：O(n^2^). 空间复杂度：O(1). KMP算法KMP算法是较为高级的算法。它使用一个next数组，这个数组记录了模式串needle自身的前缀和后缀的重复情况。同样是双指针进行匹配，当失配时可以根据这个数组找到应该将模式串向后位移多少位，避免一些重复的比较。具体的解法这里有两篇文章比较好，一篇是详细讲解KMP算法。 如果看完对产生next数组的方法还不太明白，还有一篇是讲解next数组怎么得到的。 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class Solution &#123; public int strStr(String haystack, String needle) &#123; if(needle.length() == 0)&#123; return 0; &#125; int[] next = new int[needle.length()]; // 得到next数组 getNextArr(next, needle); // i是匹配串haystack的指针，j是模式串needle的指针 int i = 0, j = 0; // 双指针开始匹配 while(i &lt; haystack.length() &amp;&amp; j &lt; needle.length())&#123; // 如果j=-1意味着刚刚失配过，下标+1后，下一轮就可以开始匹配各自的第一个了 // 如果指向的字母相同，则下一轮匹配各自的下一个 if(j == -1 || haystack.charAt(i) == needle.charAt(j))&#123; i++; j++; // 如果失配，则将更新j为next[j] &#125; else &#123; j = next[j]; &#125; &#125; return j == needle.length() ? i - j : -1; &#125; private void getNextArr(int[] next, String needle)&#123; // k是前缀中相同部分的末尾，同时也是相同部分的长度，因为长度等于k-0。 // j是后缀的末尾，即后缀相同部分的末尾 int k = -1, j = 0; next[0] = -1; while(j &lt; needle.length() - 1)&#123; // 如果k=-1，说明刚刚失配了，则重新开始计算前缀和后缀相同的长度 // 如果两个字符相等，则在上次前缀和后缀相同的长度加1就行了 if (k == -1 || needle.charAt(j) == needle.charAt(k))&#123; k++; j++; next[j] = k; &#125; else &#123; // 否则，前缀长度缩短为next[k] k = next[k]; &#125; &#125; &#125;&#125; 复杂性分析 时间复杂度：O(N+M). 空间复杂度：O(M).]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Remove Element]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F21%2FRemove-Element%2F</url>
    <content type="text"><![CDATA[题目Given an array nums and a value val, remove all instances of that value in-place and return the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. The order of elements can be changed. It doesn’t matter what you leave beyond the new length. Example 1: 12345Given nums = [3,2,2,3], val = 3,Your function should return length = 2, with the first two elements of nums being 2.It doesn&apos;t matter what you leave beyond the returned length. Example 2: 1234567Given nums = [0,1,2,2,3,0,4,2], val = 2,Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.Note that the order of those five elements can be arbitrary.It doesn&apos;t matter what values are set beyond the returned length. 解析本题和上一题非常相似，我们可以通过定义两个指针，在同一时间递增，直到 j 到达数组的末尾，新的长度就为 i 。 12345678910public int removeElement(int[] nums, int val) &#123; int i = 0; for (int j = 0; j &lt; nums.length; j++) &#123; if (nums[j] != val) &#123; nums[i] = nums[j]; i++; &#125; &#125; return i;&#125; 这种解法的排名不高，所需要的时间较多，还有优化的空间。 复杂性分析 时间复杂度：O(n). 假设n是数组的长度。每一个 i 和 j 最多遍历 n 次。 空间复杂度：O(1). 如果我们考虑数组包含很少要删除的元素的情况，当当前元素需要删除时，可以把当前元素和最后一个元素互换，然后删掉最后一个元素。不过最后一个元素也可能是需要删除的元素，所以就需要继续循环，直到当前元素不等于要删除的元素方能跳到下一个位置。 1234567891011121314public int removeElement(int[] nums, int val) &#123; int i = 0; int n = nums.length; while (i &lt; n) &#123; if (nums[i] == val) &#123; nums[i] = nums[n - 1]; // reduce array size by one n--; &#125; else &#123; i++; &#125; &#125; return n;&#125; 复杂性分析 时间复杂度：O(n). i 和 n 都走了 n 次，需要执行操作的元素只有删除的元素，故当需要删除的元素较少时，更有效率。 空间复杂度：O(1). 当需要删除的元素较少时，这种解法可以达到最优解。]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Remove Duplicates from Sorted Array]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F20%2FRemove-Duplicates-from-Sorted-Array%2F</url>
    <content type="text"><![CDATA[题目Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. Example 1: 12345Given nums = [1,1,2],Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.It doesn&apos;t matter what you leave beyond the returned length. Example 1: 12345Given nums = [0,0,1,1,1,2,2,3,3,4],Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.It doesn&apos;t matter what values are set beyond the returned length. 解析本题比较简单，我们只需要遍历数组进行判断，取出重复的值就行了。 1234567891011public int removeDuplicates(int[] nums) &#123; if (nums.length == 0) return 0; int len = 0; for(int i = 1; i &lt; nums.length; i++)&#123; if(nums[i] != nums[len])&#123; len++; nums[len] = nums[i]; &#125; &#125; return len + 1;&#125; 复杂性分析 时间复杂度：O(n). 假设n是数组的长度。每一个 i 和 j 最多遍历 n 次。 空间复杂度：O(1).]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Merge Two Sorted Lists]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F19%2FMerge-Two-Sorted-Lists%2F</url>
    <content type="text"><![CDATA[题目Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example 1: 12Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 解析 链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。 本题主要是把两个有序的链表归，特殊情况的判断要记得（例如l1为空，或者l2为空）。 1234567891011public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123; if (l1 == null) return l2; if (l2 == null) return l1; if (l1.val &lt; l2.val) &#123; l1.next = mergeTwoLists(l1.next, l2); return l1; &#125; else &#123; l2.next = mergeTwoLists(l1, l2.next); return l2; &#125;&#125; 本题的排名达到了几乎100%，也就是最优解了。 复杂性分析 时间复杂度：O(S). S 是字符串的长度，我们对每个字符都进行了判断。 空间复杂度：O(2S). 每个单独的字符我们都创建了额外的空间。]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Valid Parentheses]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F18%2FValid-Parentheses%2F</url>
    <content type="text"><![CDATA[题目Given a string containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Note that an empty string is also considered valid. Example 1: 12Input: &quot;()&quot;Output: true Example 2: 12Input: &quot;()[]&#123;&#125;&quot;Output: true Example 3: 12Input: &quot;(]&quot;Output: false Example 4: 12Input: &quot;([)]&quot;Output: false Example 5: 12Input: &quot;&#123;[]&#125;&quot;Output: true 解析本题是有关于栈的问题，将所有括号存进哈希图中，一一对应键值，然后我们先把传入的字符串分为两半，前一半存入栈，后一半与栈的最上面的值做判断，先进后出，判断到最后为栈空就意味着符合题解了。 12345678910111213141516171819202122232425public boolean isValid(String s) &#123; HashMap&lt;Character, Character&gt; map = new HashMap&lt;Character, Character&gt;(); map.put('(', ')'); //这里一定要用单引号，双引号会被认为是String类型 map.put('[', ']'); map.put('&#123;', '&#125;'); Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;(); for (int i = 0; i &lt; s.length(); i++) &#123; char current = s.charAt(i); if (map.keySet().contains(current)) &#123; stack.push(current); &#125; else if (map.values().contains(current)) &#123; if (!stack.empty() &amp;&amp; (map.get(stack.peek()) == current)) &#123; stack.pop(); &#125; else &#123; return false; &#125; &#125; &#125; return stack.empty();&#125; 本题的排名不高，所需要的时间较多，还有优化的空间。 复杂性分析 时间复杂度：O(S). S 是字符串的长度，我们对每个字符都进行了判断。 空间复杂度：O(2S). 每个单独的字符我们都创建了额外的空间。]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Longest Common Prefix]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F17%2FLongest-Common-Prefix%2F</url>
    <content type="text"><![CDATA[题目Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string &quot;&quot;. Example 1: 12Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]Output: &quot;fl&quot; Example 2: 123Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]Output: &quot;&quot;Explanation: There is no common prefix among the input strings. 解析本题也是关于分解字符串的问题，题目给出的输入都会是小写，所以我们不需要考虑大小写这个问题。主要是先判断字符为空的情况，然后让后一位与前一位比较，有相同的字符就取出来，然后继续与后一位判断，最后返回递归的值。 123456789101112131415161718public String longestCommonPrefix(String[] strs) &#123; if (strs.length == 0) &#123; return ""; &#125; String prefix = strs[0]; for (int i = 1; i &lt; strs.length; i++) while (strs[i].indexOf(prefix) != 0) &#123; prefix = prefix.substring(0, prefix.length() - 1); if (prefix.isEmpty()) &#123; return ""; &#125; &#125; return prefix;&#125; 这种写法属于水平扫描，也就是说我们从第一位取到最后一位，一个个进行比较截断。 还有一种垂直扫描，我们假设一个非常短的字符串位于数组的末尾。我们在移动到下一列之前，在同一列（字符串的相同字符索引）上从上到下比较字符。 1234567891011public String longestCommonPrefix(String[] strs) &#123; if (strs == null || strs.length == 0) return ""; for (int i = 0; i &lt; strs[0].length() ; i++)&#123; char c = strs[0].charAt(i); for (int j = 1; j &lt; strs.length; j ++) &#123; if (i == strs[j].length() || strs[j].charAt(i) != c) return strs[0].substring(0, i); &#125; &#125; return strs[0];&#125; 此题的排名一样达到了99%以上，基本上达到了最优解。 复杂性分析 时间复杂度：O(S). S 是所有字符串长度的总和，在最坏的情况下，所有的 n 个字符都是一样的长度 n ，我们把 S~1~ 和 [S~2~…S~n~] 进行了比较，总共有 S 个字符进行了比较， S 就是输入数组中所有字符串长度的总和。 空间复杂度：O(1). 我们并没有使用额外的空间。]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[零度的温暖]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F16%2F%E9%9B%B6%E5%BA%A6%E7%9A%84%E6%B8%A9%E6%9A%96%2F</url>
    <content type="text"><![CDATA[小刺猬很寂寞，虽然她有一大群朋友。 其实，平时大家很喜欢她，很善良很热心，可是刺猬身上有着一层厚厚的刺，使得周围人和她在一起时总是要小心翼翼避免受到伤害。 冬季渐渐来临，空气变得很冷，小刺猬贪恋和大家在一起的感觉，每天玩得很晚，不想回家，也忘了妈妈说过的关于冬眠的话。 有一天，天空忽然下了大雪，大雪覆盖了回家的路，小刺猬回不了家了。她害怕的躲在大树后面。看着渐渐降临的夜幕，开始胡思乱想。 这时候一个雪人问她，你迷路了吗？小刺猬说，我很害怕，很困。雪人说，那你在我怀里睡一觉吧。 她问，你不怕我伤害你吗 他说，没关系，我是雪人，冰雪做的心，不懂得疼痛。 小刺猬看了看周围的漆黑，就像一只野兽张着大嘴，更加害怕。 于是她扑进了雪人怀里。 雪人的身体里始终保持着零度，零度并不是很低的温度，因为外面的温度已经降到零下十几度了。 小刺猬带着困意问雪人，呵呵你是第一个不怕被我伤害的朋友，真的很开心，但是我好困啊，我要睡觉了。明天……明天你能陪我玩吗 雪人淡定地骗她说，当然了。睡吧小家伙。我们明天见。 嗯，明天见！ 嗯，明天见。 大雪封住了整个森林，漫长的冬季里，冰天雪地，北风呼啸。 而小刺猬在雪人的怀里睡得很甜美。 她梦见第二天早上，她和雪人一起看日出。 第二年，万物复苏的美好春天终于回来了。 小刺猬在一阵悦耳的鸟叫声中迷迷糊糊的睁开了双眼，她发现雪人的帽子正盖在自己的身上。 而雪人，早已经离开了。 雪人的心，是冰雪做的。冰雪的心，不是不懂得疼痛，而是不在乎疼痛，因为你，比疼痛更重要。 我不能给你更多的温暖，但是我可以驱散寒冷。 回到那个离别的早晨。 春天是在前一天的夜晚悄悄来临的。于是在第一天的早上，温暖的阳光打在了雪人的脸上，雪人开始变小，满脸的水痕。 他无奈的看着怀里的小刺猬。 笨蛋，我骗了你啊。 如果你说，我对你的好，是我给你的，微不足道的，零度的温暖。 那我也要感谢你，给了我一颗，懂得了疼痛的心。]]></content>
      <categories>
        <category>我说故事你说好的</category>
      </categories>
      <tags>
        <tag>故事君</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Roman to Integer]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F16%2FRoman-to-Integer%2F</url>
    <content type="text"><![CDATA[题目Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. Example 1: 12Input: &quot;III&quot;Output: 3 Example 2: 12Input: &quot;IV&quot;Output: 4 Example 3: 12Input: &quot;IX&quot;Output: 9 Example 4: 123Input: &quot;LVIII&quot;Output: 58Explanation: C = 100, L = 50, XXX = 30 and III = 3. Example 5: 123Input: &quot;MCMXCIV&quot;Output: 1994Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. 解析趁此机会，我们可以来了解一下罗马数字的规则，麻麻再也不用担心我读错iPhoneX了。 罗马数字是基于七个不同的符号对应数字形成的，分别是：I, V, X, L, C, D and M。 I V X L C D M 1 5 10 50 100 500 1000 例如，2用II 罗马数字写成，只需要两个加在一起。12写为XII，也就是X+ II。数字27写为XXVII，也就是XX+ V+ II。 罗马数字通常从左到右从最大到最小。但是，数字4不是IIII。相反，4被写为IV。因为1在5之前，我们减去4。同样的原则适用于9的罗马数字IX。我们举几个栗子： I可以放在V（5）和X（10）之前表示4和9。 X可以放在L（50）和C（100）之前表示40和90。 C可以放在D（500）和M（1000）之前表示400和900。 回到这道题，我们遍历传入的字符来得到相应的值数组，一一对应罗马数字，然后循环判断前一个数是否比后一个数大，是则加，否则减。 123456789101112131415161718192021222324252627282930313233343536373839public int romanToInt(String s) &#123; int[] number = new int[s.length()]; for(int i = 0; i &lt; s.length(); i++)&#123; switch(s.charAt(i))&#123; case 'M': number[i] = 1000; break; case 'D': number[i] = 500; break; case 'C': number[i] = 100; break; case 'L': number[i] = 50; break; case 'X': number[i] = 10; break; case 'V': number[i] = 5; break; case 'I': number[i] = 1; break; default: &#125; &#125; int sum = 0; for(int i = 0; i &lt; number.length - 1; i++)&#123; if(number[i] &lt; number[i + 1])&#123; sum -= number[i]; &#125;else&#123; sum += number[i]; &#125; &#125; return sum + number[number.length - 1];&#125; 此题的排名能达到99%以上，基本上达到了最优解。 复杂性分析 时间复杂度：O(N). 空间复杂度：O(N).]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Palindrome Number]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F15%2FPalindrome-Number%2F</url>
    <content type="text"><![CDATA[题目Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. Example 1: 12Input: 121Output: true Example 2: 123Input: -121Output: falseExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. Example 3: 123Input: 10Output: falseExplanation: Reads 01 from right to left. Therefore it is not a palindrome. 解析本题要求最好不能使用额外的内存，我们也就不能选择把整数换成字符串再进行反转判断。这道题的思路跟上一题《Reverse Integer》的解法很像，只不过这次我们只需要将整数分为左右两边，右边的进行反转，最后就能进行判断了。 1234567891011public boolean isPalindrome(int x) &#123; if(x &lt; 0 || (x % 10 == 0 &amp;&amp; x != 0))&#123; return false; &#125; int reverse = 0; while(x &gt; reverse)&#123; reverse = reverse * 10 + x % 10; x /= 10; &#125; return x == reverse || x == reverse / 10;&#125; 复杂性分析 时间复杂度：O(log~10~(n)). 因为我们每次递归都会除以10，所以时间复杂度也就会是O(log~10~(n))了。 空间复杂度：O(1).]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如果把人生比成一局DOTA，大家现在局势如何？接下来怎么打？]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F14%2F%E5%A6%82%E6%9E%9C%E6%8A%8A%E4%BA%BA%E7%94%9F%E6%AF%94%E6%88%90%E4%B8%80%E5%B1%80DOTA%EF%BC%8C%E5%A4%A7%E5%AE%B6%E7%8E%B0%E5%9C%A8%E5%B1%80%E5%8A%BF%E5%A6%82%E4%BD%95%EF%BC%9F%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%80%8E%E4%B9%88%E6%89%93%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[我一出生的时候，便看到了樱花纷落的大树下，一群人背对着我走出去。临走前他们却不忘回头跟我说，买个信使，还有，中路补个眼。 我揉了揉眼睛，旁边一个满脸泛金的大叔递给我一个拐杖一样的东西，我很疑惑：为什么给我这个？ 他笑了笑，问我要什么。刚想开口，远处砸来几声怒吼：快来下路保我！ 我艰难站起来，看见自己穿着平时自己最喜欢的衣服，嗯，天空一样的颜色。大叔塞给我一个眼，便把我推了出去。 之后，我只记得天空掠过了一只小鸟，地上也溜过了一只松鼠，接着便天黑了。到处都是刀光剑影，到处都是杀戮的配音，震得我耳鸣。 可是我无能为力，我撑着大叔给我的那根拐杖逃避了一次又一次战斗，回头发觉所有人都躺在血泊中，余一个杀红眼的人，不断嘲笑我。 没有人杀过我，或者说，没有人愿意去在乎这个弱小的身躯。 我很害怕，一出生便被注定杀戮，信仰？快感？ 终于在我耗尽所有力气后，我又回到了大叔身边。这时的樱花树下，已经被马蹄践踏得面目全非，平时喷涌而出的泉水也已了无生机。我再次被推了出去，这次我站在了一个很高的地方，我可以看见一个个从岩浆里面走出来的恶魔，正面目狰狞地如死神一般袭来。 结局显而易见，昔日英雄被斩落马下，家园也被尽拆。但是机会来了，奋战到最后一刻的大哥把所有恶魔都困在了同一个地方。 “快放大！” 这是我听见第一次有人对我抱有希望的呐喊。手中的拐杖亮了起来，天空开始风云变幻，地上的樱花也被扬起，此时所有的恶魔似乎都想努力逃窜。 我在干什么？为什么他们这么怕我？ 难道这样能赢？ 哦， 我记起来了，我叫冰晶室女，我正在召唤一场暴风雪，这样一来，所有的恶魔都将退散。 但是我哭了，暴风雪逐渐消失，世界树在这个时候轰然倒塌，最后记得的时候，我趴在地上哭。 因为我听见一个小恶魔对我说，小姐姐好厉害，我这一生都没看过雪呢。 嗯，我这一生，还没见到你呢。]]></content>
      <categories>
        <category>我说故事你说好的</category>
      </categories>
      <tags>
        <tag>故事君</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Reverse Integer]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F14%2FReverse-Integer%2F</url>
    <content type="text"><![CDATA[题目Given a 32-bit signed integer, reverse digits of an integer. Example 1: 12Input: 123Output: 321 Example 2: 12Input: -123Output: -321 Example 3: 12Input: 120Output: 21 解析本题主要是取余的应用，通过递归反转整数，到最后取到我们需要的反转值。但是，我们需要考虑到 int 的范围，以防溢出（ -2147483648～2147483647 ）。 1234567891011public int reverse(int x) &#123; int res = 0; while(x != 0) &#123; int single = x % 10; x /= 10; if (res &gt; Integer.MAX_VALUE/10 || (res == Integer.MAX_VALUE / 10 &amp;&amp; single &gt; 7)) return 0; if (res &lt; Integer.MIN_VALUE/10 || (res == Integer.MIN_VALUE / 10 &amp;&amp; single &lt; -8)) return 0; res = res * 10 + single; &#125; return res;&#125; 我们首先选择的方法会决定最后得出的结果，如果一开始就想到用递归，那么解出这道题便不会太难，但本题的也只排在35%，以后尽量寻求合理范围的最优解。 复杂性分析 时间复杂度：O(log~10~(n)). 因为我们每次递归都会除以10，所以时间复杂度也就会是O(log~10~(n))了。 空间复杂度：O(1).]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Two Sum]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F13%2FTwo-Sum%2F</url>
    <content type="text"><![CDATA[题目Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: 1234Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. 解析哈希表使用 O(N) 空间复杂度存储数据，并且以 O(1) 时间复杂度求解问题。 Java 中的 HashSet 用来存储一个集合，可以通过查找元素判断是否在集合中。举个例子，如果我们只需要判断的元素有限，并且范围不大，那么可以用一个布尔数组来存储一个元素是否存在。例如对于只有小写字符的元素，就可以用一个长度为 26 的布尔数组来存储一个字符集合，使得空间复杂度降低为 O(1)。 Java 中的 HashMap 主要用于映射关系，从而把两个元素联系起来。HashMap 也可以用来对元素进行计数统计，此时键为元素，值为计数。和 HashSet 类似，如果元素有穷并且范围不大，可以用整型数组来进行统计。在对一个内容进行压缩或者其它转换时，利用 HashMap 可以把原始内容和转换后的内容联系起来。 对于这道题而言，如果我们采用普通的遍历判断，比如： 12345678910public int[] twoSum(int[] nums, int target) &#123; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = i + 1; j &lt; nums.length; j++) &#123; if (nums[j] == target - nums[i]) &#123; return new int[] &#123; i, j &#125;; &#125; &#125; &#125; throw new IllegalArgumentException("No two sum solution");&#125; 那么时间间复杂度将会达到O(n^2^)，而空间复杂度为O(1)。不过，我们心里会想，怎么会这么简单呢？如果想更进一步找到更好的解法，可以先对数组进行排序，然后使用双指针方法或者二分查找方法。这样做的时间复杂度为 O(NlogN)，空间复杂度为 O(1)。 用 HashMap 存储数组元素和索引的映射，在访问到 nums[i] 时，判断 HashMap 中是否存在 target - nums[i]，如果存在说明 target - nums[i] 所在的索引和 i 就是要找的两个数。该方法的时间复杂度为 O(N)，空间复杂度为 O(N)，使用空间来换取时间。 1234567891011public int[] twoSum(int[] nums, int target) &#123; HashMap&lt;Integer, Integer&gt; indexForNum = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; if (indexForNum.containsKey(target - nums[i])) &#123; return new int[]&#123;indexForNum.get(target - nums[i]), i&#125;; &#125; else &#123; indexForNum.put(nums[i], i); &#125; &#125; return null;&#125; 此题AC并不难，但是最后这种解法也只是超过66%左右，但是这已经足够我们学习哈希表了。 复杂性分析 时间复杂度：O(N)。 空间复杂度：O(N)。]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Flawliet.github.io%2F2018%2F08%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[开通此博客之初，是为了更好地记录自己生活的点滴，我们活得如此有趣，总会有一些话想对你说。一开始我会记录自己在LeetCode上的学习经历，之后会发生什么，我也不知道。]]></content>
  </entry>
</search>
